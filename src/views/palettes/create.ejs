<h1>Create New Palette</h1>

<% if (typeof errors !== 'undefined' && errors.length > 0) { %>
    <div class="error-list">
        <ul>
            <% errors.forEach(error => { %>
                <li><%= error.msg %></li>
            <% }) %>
        </ul>
    </div>
<% } %>

<div class="create-palette-container">
    <form action="/palettes/create" method="POST" class="palette-form">
        <div class="form-group">
            <label for="name">Palette Name</label>
            <input 
                type="text" 
                id="name" 
                name="name" 
                required 
                minlength="3" 
                maxlength="100"
                value="<%= typeof formData !== 'undefined' ? formData.name : '' %>"
            >
        </div>
        
        <div class="form-group">
            <label for="description">Description</label>
            <textarea 
                id="description" 
                name="description" 
                rows="3" 
                maxlength="500"
            ><%= typeof formData !== 'undefined' ? formData.description : '' %></textarea>
        </div>
        
        <div class="form-group">
            <label>Colors</label>
            <div id="color-picker" class="color-picker-container">
                <div class="color-picker-controls">
                    <div>
                        <input type="color" id="color-input" value="#3498db">
                        <div id="color-preview" class="color-preview" style="background-color: #3498db;"></div>
                    </div>
                    <button type="button" id="add-color" class="btn">Add Color</button>
                    <button type="button" id="generate-random" class="btn btn-outline">Random Colors</button>
                </div>
                
                <div id="colors-list" class="colors-list">
                    <!-- Colors will be added here -->
                </div>
                
                <!-- Hidden input to store colors array -->
                <input type="hidden" id="colors" name="colors" value="<%= typeof formData !== 'undefined' && formData.colors ? JSON.stringify(formData.colors) : '[]' %>">
                
                <div class="color-schemes">
                    <label>Generate Color Scheme:</label>
                    <div class="scheme-buttons">
                        <button type="button" class="btn btn-sm" data-scheme="analogous">Analogous</button>
                        <button type="button" class="btn btn-sm" data-scheme="complementary">Complementary</button>
                        <button type="button" class="btn btn-sm" data-scheme="triadic">Triadic</button>
                        <button type="button" class="btn btn-sm" data-scheme="monochromatic">Monochromatic</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group">
            <label>
                <input 
                    type="checkbox" 
                    id="isPublic" 
                    name="isPublic" 
                    value="true" 
                    <%= typeof formData !== 'undefined' && formData.isPublic === 'false' ? '' : 'checked' %>
                >
                Make this palette public
            </label>
        </div>
        
        <div class="form-actions">
            <button type="submit" class="btn btn-primary">Save Palette</button>
            <a href="/palettes" class="btn btn-outline">Cancel</a>
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const colorInput = document.getElementById('color-input');
        const colorPreview = document.getElementById('color-preview');
        const addColorBtn = document.getElementById('add-color');
        const generateRandomBtn = document.getElementById('generate-random');
        const colorsList = document.getElementById('colors-list');
        const colorsInput = document.getElementById('colors');
        const schemeButtons = document.querySelectorAll('.scheme-buttons button');
        
        // Update preview when color picker changes
        colorInput.addEventListener('input', function() {
            colorPreview.style.backgroundColor = this.value;
        });
        
        // Add color to palette
        addColorBtn.addEventListener('click', function() {
            addColorToList(colorInput.value);
        });
        
        // Generate random colors
        generateRandomBtn.addEventListener('click', function() {
            // Clear existing colors
            colorsList.innerHTML = '';
            
            // Generate 5 random colors
            for (let i = 0; i < 5; i++) {
                const randomColor = generateRandomColor();
                addColorToList(randomColor);
            }
        });
        
        // Generate color schemes
        schemeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const scheme = this.getAttribute('data-scheme');
                const baseColor = colorInput.value;
                
                // Generate colors based on scheme
                const colors = generateColorPalette(baseColor, scheme, 5);
                
                // Clear existing colors
                colorsList.innerHTML = '';
                
                // Add new colors
                colors.forEach(color => {
                    addColorToList(color);
                });
            });
        });
        
        // Initialize with existing colors if editing
        if (colorsInput.value && colorsInput.value !== '[]') {
            const colors = JSON.parse(colorsInput.value);
            colors.forEach(color => {
                addColorToList(color);
            });
        }
        
        // Add color to list and update hidden input
        function addColorToList(color) {
            // Check if we've reached the maximum number of colors (10)
            if (colorsList.children.length >= 10) {
                alert('Maximum of 10 colors allowed per palette');
                return;
            }
            
            // Create color item
            const colorItem = document.createElement('div');
            colorItem.className = 'color-item';
            colorItem.style.backgroundColor = color;
            colorItem.setAttribute('data-color', color);
            
            // Add remove button
            const removeBtn = document.createElement('span');
            removeBtn.className = 'color-remove';
            removeBtn.innerHTML = '&times;';
            removeBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                colorItem.remove();
                updateColorsInput();
            });
            
            colorItem.appendChild(removeBtn);
            colorsList.appendChild(colorItem);
            
            // Update hidden input with all colors
            updateColorsInput();
        }
        
        // Update hidden input with current colors
        function updateColorsInput() {
            const colors = [];
            document.querySelectorAll('.color-item').forEach(item => {
                colors.push(item.getAttribute('data-color'));
            });
            
            colorsInput.value = JSON.stringify(colors);
        }
        
        // Generate a random color
        function generateRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            
            return color;
        }
        
        // Generate a color palette based on a scheme
        function generateColorPalette(baseColor = null, scheme = 'analogous', count = 5) {
            // If no base color provided, generate a random one
            if (!baseColor) {
                baseColor = generateRandomColor();
            }
            
            // Convert hex to HSL for easier manipulation
            let h, s, l;
            
            // Convert hex to rgb
            const r = parseInt(baseColor.substring(1, 3), 16) / 255;
            const g = parseInt(baseColor.substring(3, 5), 16) / 255;
            const b = parseInt(baseColor.substring(5, 7), 16) / 255;
            
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            
            // Calculate hue
            if (max === min) {
                h = 0;
            } else if (max === r) {
                h = 60 * ((g - b) / (max - min));
            } else if (max === g) {
                h = 60 * (2 + (b - r) / (max - min));
            } else {
                h = 60 * (4 + (r - g) / (max - min));
            }
            
            if (h < 0) h += 360;
            
            // Calculate lightness
            l = (max + min) / 2;
            
            // Calculate saturation
            if (max === min) {
                s = 0;
            } else if (l <= 0.5) {
                s = (max - min) / (max + min);
            } else {
                s = (max - min) / (2 - max - min);
            }
            
            // Convert to percentages
            s *= 100;
            l *= 100;
            
            // Generate palette based on scheme
            const palette = [baseColor];
            
            switch (scheme) {
                case 'analogous':
                    // Colors adjacent on the color wheel
                    for (let i = 1; i < count; i++) {
                        const newHue = (h + (i * 30)) % 360;
                        palette.push(hslToHex(newHue, s, l));
                    }
                    break;
                    
                case 'complementary':
                    // Colors opposite on the color wheel
                    palette.push(hslToHex((h + 180) % 360, s, l));
                    
                    // Add variations if more colors needed
                    if (count > 2) {
                        for (let i = 2; i < count; i++) {
                            const isLight = i % 2 === 0;
                            const newL = isLight ? Math.min(l + 15, 100) : Math.max(l - 15, 0);
                            palette.push(hslToHex(h, s, newL));
                        }
                    }
                    break;
                    
                case 'triadic':
                    // Three colors evenly spaced on the color wheel
                    palette.push(hslToHex((h + 120) % 360, s, l));
                    palette.push(hslToHex((h + 240) % 360, s, l));
                    
                    // Add variations if more colors needed
                    if (count > 3) {
                        for (let i = 3; i < count; i++) {
                            const isLight = i % 2 === 0;
                            const baseIndex = i % 3;
                            const baseH = baseIndex === 0 ? h : (baseIndex === 1 ? (h + 120) % 360 : (h + 240) % 360);
                            const newL = isLight ? Math.min(l + 15, 100) : Math.max(l - 15, 0);
                            palette.push(hslToHex(baseH, s, newL));
                        }
                    }
                    break;
                    
                case 'monochromatic':
                    // Different shades of the same color
                    for (let i = 1; i < count; i++) {
                        const newL = l + (i * (100 - l) / count);
                        palette.push(hslToHex(h, s, newL));
                    }
                    break;
                    
                default:
                    // Random palette
                    for (let i = 1; i < count; i++) {
                        palette.push(generateRandomColor());
                    }
            }
            
            return palette;
        }
        
        // Convert HSL values to hex color
        function hslToHex(h, s, l) {
            h /= 360;
            s /= 100;
            l /= 100;
            
            let r, g, b;
            
            if (s === 0) {
                r = g = b = l;
            } else {
                const hue2rgb = (p, q, t) => {
                    if (t < 0) t += 1;
                    if (t > 1) t -= 1;
                    if (t < 1/6) return p + (q - p) * 6 * t;
                    if (t < 1/2) return q;
                    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                    return p;
                };
                
                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                const p = 2 * l - q;
                
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }
            
            const toHex = (x) => {
                const hex = Math.round(x * 255).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            };
            
            return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
        }
    });
</script>

<style>
    .create-palette-container {
        max-width: 800px;
        margin: 0 auto;
    }
    
    .palette-form {
        background-color: white;
        padding: var(--spacing-lg);
        border-radius: var(--border-radius-md);
        box-shadow: var(--shadow-sm);
    }
    
    .color-picker-controls {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
    }
    
    .color-preview {
        width: 100px;
        height: 40px;
        border-radius: var(--border-radius-sm);
        margin-top: var(--spacing-xs);
    }
    
    .color-schemes {
        margin-top: var(--spacing-md);
    }
    
    .scheme-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: var(--spacing-xs);
        margin-top: var(--spacing-xs);
    }
    
    .form-actions {
        margin-top: var(--spacing-lg);
        display: flex;
        gap: var(--spacing-md);
    }
</style>