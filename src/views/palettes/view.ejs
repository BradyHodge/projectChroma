<div class="single-palette">
    <div class="palette-header">
        <div class="palette-title">
            <h1><%= palette.name %></h1>
            <p class="palette-subtitle">
                Created by <a href="/palettes/user/<%= palette.username %>" class="palette-creator"><%= palette.username %></a> 
                on <%= new Date(palette.created_at).toLocaleDateString() %>
            </p>
        </div>
        
        <div class="palette-actions">
            <% if (isOwner) { %>
                <a href="/palettes/<%= palette.palette_id %>/edit" class="btn btn-sm">Edit</a>
                <form action="/palettes/<%= palette.palette_id %>/delete" method="POST" class="delete-form" onsubmit="return confirm('Are you sure you want to delete this palette?');">
                    <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                </form>
            <% } %>
            
            <% if (user) { %>
                <button class="upvote-btn <%= hasUpvoted ? 'active' : '' %>" data-palette-id="<%= palette.palette_id %>">
                    <span class="upvote-icon">▲</span>
                    <span class="upvote-count"><%= palette.upvote_count %></span>
                    <span class="upvote-text"><%= hasUpvoted ? 'Upvoted' : 'Upvote' %></span>
                </button>
            <% } else { %>
                <div class="upvote-display">
                    <span class="upvote-icon">▲</span>
                    <span class="upvote-count"><%= palette.upvote_count %></span>
                    <a href="/auth/login" class="btn btn-sm">Login to Upvote</a>
                </div>
            <% } %>
        </div>
    </div>
    
    <% if (palette.description) { %>
        <div class="palette-description">
            <p><%= palette.description %></p>
        </div>
    <% } %>
    
    <div class="color-display">
        <% palette.colors.forEach(color => { %>
            <div class="color-block" style="background-color: <%= color %>" data-hex="<%= color %>">
                <div class="color-hex"><%= color %></div>
            </div>
        <% }) %>
    </div>
    
    <div class="palette-info-box">
        <div class="info-item">
            <h3>How to Use</h3>
            <p>Click on any color to copy its hex code to your clipboard.</p>
        </div>
        
        <div class="info-item">
            <h3>Color Codes</h3>
            <div class="color-codes">
                <% palette.colors.forEach(color => { %>
                    <div class="color-code-item">
                        <div class="color-swatch" style="background-color: <%= color %>"></div>
                        <code class="color-code-hex"><%= color %></code>
                    </div>
                <% }) %>
            </div>
        </div>
    </div>
    
    <div class="share-section">
        <h3>Share This Palette</h3>
        <div class="share-links">
            <button class="btn btn-sm copy-link-btn" data-url="<%= `${req.protocol}://${req.get('host')}${req.originalUrl}` %>">
                Copy Link
            </button>
        </div>
    </div>
</div>

<div class="related-palettes">
    <h2>You Might Also Like</h2>
    
    <div id="related-palettes-container" class="palette-container">
        <!-- Related palettes will be loaded here via AJAX -->
        <div class="loading">Loading similar palettes...</div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Copy color code when clicking on a color block
        document.querySelectorAll('.color-block').forEach(block => {
            block.addEventListener('click', function() {
                const hexCode = this.getAttribute('data-hex');
                copyToClipboard(hexCode);
                
                // Show tooltip
                const tooltip = document.createElement('div');
                tooltip.className = 'tooltip';
                tooltip.textContent = 'Copied!';
                this.appendChild(tooltip);
                
                // Remove tooltip after a delay
                setTimeout(() => {
                    tooltip.remove();
                }, 1500);
            });
        });
        
        // Handle upvote button
        const upvoteBtn = document.querySelector('.upvote-btn');
        if (upvoteBtn) {
            upvoteBtn.addEventListener('click', async function() {
                const paletteId = this.getAttribute('data-palette-id');
                const countEl = this.querySelector('.upvote-count');
                const textEl = this.querySelector('.upvote-text');
                
                try {
                    const response = await fetch(`/palettes/${paletteId}/upvote`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        const currentCount = parseInt(countEl.textContent);
                        
                        if (data.action === 'added') {
                            countEl.textContent = currentCount + 1;
                            this.classList.add('active');
                            textEl.textContent = 'Upvoted';
                        } else {
                            countEl.textContent = currentCount - 1;
                            this.classList.remove('active');
                            textEl.textContent = 'Upvote';
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        }
        
        // Copy share link
        const copyLinkBtn = document.querySelector('.copy-link-btn');
        if (copyLinkBtn) {
            copyLinkBtn.addEventListener('click', function() {
                const url = this.getAttribute('data-url');
                copyToClipboard(url);
                
                // Show feedback
                const originalText = this.textContent;
                this.textContent = 'Copied!';
                setTimeout(() => {
                    this.textContent = originalText;
                }, 1500);
            });
        }
        
        // Load related palettes
        loadRelatedPalettes();
        
        // Function to copy text to clipboard
        function copyToClipboard(text) {
            // Create temporary input element
            const input = document.createElement('input');
            input.value = text;
            document.body.appendChild(input);
            
            // Select and copy
            input.select();
            document.execCommand('copy');
            
            // Remove temporary element
            document.body.removeChild(input);
        }
        
        // Function to load related palettes
        async function loadRelatedPalettes() {
            const paletteId = '<%= palette.palette_id %>';
            const container = document.getElementById('related-palettes-container');
            
            try {
                const response = await fetch(`/palettes/related/${paletteId}`);
                if (!response.ok) throw new Error('Network response was not ok');
                
                const data = await response.json();
                
                // Clear loading indicator
                container.innerHTML = '';
                
                if (data.palettes && data.palettes.length > 0) {
                    data.palettes.forEach(palette => {
                        container.appendChild(createPaletteCard(palette));
                    });
                } else {
                    container.innerHTML = '<div class="empty-state"><p>No related palettes found</p></div>';
                }
            } catch (error) {
                console.error('Error loading related palettes:', error);
                container.innerHTML = '<div class="error">Failed to load related palettes</div>';
            }
        }
        
        // Function to create a palette card
        function createPaletteCard(palette) {
            const card = document.createElement('div');
            card.className = 'card palette-card';
            
            // Create colors display
            const colorsDiv = document.createElement('div');
            colorsDiv.className = 'palette-colors';
            
            palette.colors.forEach(color => {
                const colorDiv = document.createElement('div');
                colorDiv.className = 'palette-color';
                colorDiv.style.backgroundColor = color;
                colorsDiv.appendChild(colorDiv);
            });
            
            // Create info section
            const infoDiv = document.createElement('div');
            infoDiv.className = 'palette-info';
            
            const title = document.createElement('h3');
            title.innerHTML = `<a href="/palettes/${palette.palette_id}">${palette.name}</a>`;
            
            const description = document.createElement('p');
            if (palette.description) {
                description.textContent = palette.description.length > 60 ? 
                    palette.description.substring(0, 60) + '...' : palette.description;
            }
            
            const meta = document.createElement('div');
            meta.className = 'palette-meta';
            meta.innerHTML = `
                <span>By <a href="/palettes/user/${palette.username}">${palette.username}</a></span>
                <span>${new Date(palette.created_at).toLocaleDateString()}</span>
            `;
            
            infoDiv.appendChild(title);
            infoDiv.appendChild(description);
            infoDiv.appendChild(meta);
            
            // Create actions section
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'palette-actions';
            
            actionsDiv.innerHTML = `
                <a href="/palettes/${palette.palette_id}" class="btn btn-sm">View Details</a>
                <div class="palette-upvotes">
                    <span class="upvote-display">
                        <span class="upvote-icon">▲</span>
                        <span class="upvote-count">${palette.upvote_count}</span>
                    </span>
                </div>
            `;
            
            // Assemble card
            card.appendChild(colorsDiv);
            card.appendChild(infoDiv);
            card.appendChild(actionsDiv);
            
            return card;
        }
    });
</script>

<style>
    .single-palette {
        margin-bottom: var(--spacing-xl);
    }
    
    .palette-description {
        margin-bottom: var(--spacing-md);
    }
    
    .palette-actions {
        display: flex;
        gap: var(--spacing-sm);
        align-items: center;
    }
    
    .delete-form {
        display: inline;
    }
    
    .color-display {
        display: flex;
        height: 300px;
        border-radius: var(--border-radius-md);
        overflow: hidden;
        margin-bottom: var(--spacing-lg);
        box-shadow: var(--shadow-md);
    }
    
    .color-block {
        flex: 1;
        position: relative;
        transition: flex 0.3s ease;
        cursor: pointer;
    }
    
    .color-block:hover {
        flex: 1.5;
    }
    
    .color-hex {
        position: absolute;
        bottom: 0;
        width: 100%;
        text-align: center;
        padding: var(--spacing-xs);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        font-family: monospace;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .color-block:hover .color-hex {
        opacity: 1;
    }
    
    .palette-info-box {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--spacing-lg);
        margin-bottom: var(--spacing-lg);
    }
    
    .info-item {
        background-color: white;
        padding: var(--spacing-md);
        border-radius: var(--border-radius-md);
        box-shadow: var(--shadow-sm);
    }
    
    .info-item h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-sm);
        border-bottom: 1px solid #eee;
        padding-bottom: var(--spacing-xs);
    }
    
    .color-codes {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: var(--spacing-sm);
    }
    
    .color-code-item {
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
    }
    
    .color-swatch {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 1px solid #ddd;
    }
    
    .color-code-hex {
        font-family: monospace;
        font-size: 0.875rem;
    }
    
    .share-section {
        background-color: white;
        padding: var(--spacing-md);
        border-radius: var(--border-radius-md);
        box-shadow: var(--shadow-sm);
        margin-bottom: var(--spacing-lg);
    }
    
    .share-section h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-sm);
    }
    
    .tooltip {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--border-radius-sm);
        font-size: 0.875rem;
        animation: fadeIn 0.3s;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .upvote-btn {
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: var(--border-radius-sm);
        padding: var(--spacing-xs) var(--spacing-sm);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .upvote-btn:hover {
        background-color: #f5f5f5;
    }
    
    .upvote-btn.active {
        background-color: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }
    
    .upvote-display {
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
    }
    
    .related-palettes {
        margin-bottom: var(--spacing-xl);
    }
    
    .loading, .error, .empty-state {
        text-align: center;
        padding: var(--spacing-md);
        border-radius: var(--border-radius-md);
        background-color: #f9f9f9;
        grid-column: 1 / -1;
    }
    
    .error {
        color: var(--color-danger);
    }
    
    @media (max-width: 768px) {
        .palette-info-box {
            grid-template-columns: 1fr;
        }
    }
</style>