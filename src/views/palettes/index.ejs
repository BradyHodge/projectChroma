<div class="palettes-container">
    <div class="palettes-header">
        <h1><%= title %></h1>
        
        <div class="filters">
            <select id="sort-filter" class="form-control">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="most-upvotes" <%= title.includes('Trending') ? 'selected' : '' %>>Most Upvotes</option>
                <option value="most-colors">Most Colors</option>
                <option value="least-colors">Least Colors</option>
            </select>
        </div>
    </div>
    
    <% if (user) { %>
        <div class="create-action">
            <a href="/palettes/create" class="btn btn-primary">Create New Palette</a>
        </div>
    <% } %>
    
    <div class="palette-container" id="palettes-grid">
        <% if (palettes && palettes.length > 0) { %>
            <% palettes.forEach(palette => { %>
                <div class="card palette-card" data-upvotes="<%= palette.upvote_count %>" data-colors="<%= palette.colors.length %>" data-date="<%= new Date(palette.created_at).getTime() %>">
                    <div class="palette-colors">
                        <% palette.colors.forEach(color => { %>
                            <div class="palette-color" style="background-color: <%= color %>"></div>
                        <% }) %>
                    </div>
                    <div class="palette-info">
                        <h3><a href="/palettes/<%= palette.palette_id %>"><%= palette.name %></a></h3>
                        <p><%= palette.description ? (palette.description.length > 60 ? palette.description.substring(0, 60) + '...' : palette.description) : '' %></p>
                        <div class="palette-meta">
                            <span>By <a href="/palettes/user/<%= palette.username %>"><%= palette.username %></a></span>
                            <span><%= new Date(palette.created_at).toLocaleDateString() %></span>
                        </div>
                    </div>
                    <div class="palette-actions">
                        <a href="/palettes/<%= palette.palette_id %>" class="btn btn-sm">View Details</a>
                        <div class="palette-upvotes">
                            <% if (user) { %>
                                <button class="upvote-btn <%= palette.hasUpvoted ? 'active' : '' %>" data-palette-id="<%= palette.palette_id %>">
                                    <span class="upvote-icon">▲</span>
                                    <span class="upvote-count"><%= palette.upvote_count %></span>
                                </button>
                            <% } else { %>
                                <div class="upvote-display">
                                    <span class="upvote-icon">▲</span>
                                    <span class="upvote-count"><%= palette.upvote_count %></span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="empty-state">
                <p>No palettes found.</p>
                <% if (user) { %>
                    <a href="/palettes/create" class="btn">Create New Palette</a>
                <% } else { %>
                    <a href="/auth/login" class="btn">Login to Create</a>
                <% } %>
            </div>
        <% } %>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle upvote buttons
        document.querySelectorAll('.upvote-btn').forEach(btn => {
            btn.addEventListener('click', async function(e) {
                e.preventDefault();
                
                const paletteId = this.getAttribute('data-palette-id');
                const countEl = this.querySelector('.upvote-count');
                
                try {
                    const response = await fetch(`/palettes/${paletteId}/upvote`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        const currentCount = parseInt(countEl.textContent);
                        
                        if (data.action === 'added') {
                            countEl.textContent = currentCount + 1;
                            this.classList.add('active');
                        } else {
                            countEl.textContent = currentCount - 1;
                            this.classList.remove('active');
                        }
                        
                        // Update the data-upvotes attribute for sorting
                        this.closest('.palette-card').setAttribute('data-upvotes', data.action === 'added' ? currentCount + 1 : currentCount - 1);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });
        
        // Handle sorting
        const sortFilter = document.getElementById('sort-filter');
        if (sortFilter) {
            sortFilter.addEventListener('change', function() {
                sortPalettes(this.value);
            });
        }
        
        // Sort palettes function
        function sortPalettes(sortBy) {
            const palettesGrid = document.getElementById('palettes-grid');
            const paletteCards = Array.from(palettesGrid.querySelectorAll('.palette-card'));
            
            paletteCards.sort((a, b) => {
                switch (sortBy) {
                    case 'newest':
                        return parseInt(b.getAttribute('data-date')) - parseInt(a.getAttribute('data-date'));
                    case 'oldest':
                        return parseInt(a.getAttribute('data-date')) - parseInt(b.getAttribute('data-date'));
                    case 'most-upvotes':
                        return parseInt(b.getAttribute('data-upvotes')) - parseInt(a.getAttribute('data-upvotes'));
                    case 'most-colors':
                        return parseInt(b.getAttribute('data-colors')) - parseInt(a.getAttribute('data-colors'));
                    case 'least-colors':
                        return parseInt(a.getAttribute('data-colors')) - parseInt(b.getAttribute('data-colors'));
                    default:
                        return 0;
                }
            });
            
            // Remove all cards from the grid
            paletteCards.forEach(card => card.remove());
            
            // Add sorted cards back to the grid
            paletteCards.forEach(card => palettesGrid.appendChild(card));
        }
    });
</script>

<style>
    .palettes-container {
        margin-bottom: var(--spacing-xl);
    }
    
    .palettes-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-lg);
    }
    
    .filters {
        display: flex;
        gap: var(--spacing-sm);
    }
    
    .create-action {
        margin-bottom: var(--spacing-lg);
        text-align: right;
    }
    
    .empty-state {
        text-align: center;
        padding: var(--spacing-lg);
        background-color: #f9f9f9;
        border-radius: var(--border-radius-md);
        grid-column: 1 / -1;
    }
    
    .palette-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: var(--spacing-md);
    }
    
    .palette-card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .palette-colors {
        display: flex;
        height: 150px;
        border-top-left-radius: var(--border-radius-md);
        border-top-right-radius: var(--border-radius-md);
        overflow: hidden;
    }
    
    .palette-color {
        flex: 1;
        transition: flex 0.3s ease;
    }
    
    .palette-color:hover {
        flex: 1.5;
    }
    
    .palette-info {
        padding: var(--spacing-md);
        flex: 1;
    }
    
    .palette-info h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-xs);
        font-size: 1.25rem;
    }
    
    .palette-info p {
        margin-bottom: var(--spacing-xs);
        font-size: 0.875rem;
        color: #666;
    }
    
    .palette-meta {
        display: flex;
        justify-content: space-between;
        font-size: 0.75rem;
        color: #888;
    }
    
    .palette-actions {
        display: flex;
        justify-content: space-between;
        padding: var(--spacing-sm) var(--spacing-md);
        border-top: 1px solid #eee;
    }
    
    .upvote-btn {
        background: none;
        border: none;
        color: #888;
        cursor: pointer;
        padding: var(--spacing-xs);
        display: flex;
        align-items: center;
        font-size: 0.875rem;
        transition: color 0.2s ease;
    }
    
    .upvote-btn:hover {
        color: var(--color-accent);
    }
    
    .upvote-btn.active {
        color: var(--color-accent);
    }
    
    .upvote-count {
        margin-left: var(--spacing-xs);
    }
    
    .upvote-display {
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        font-size: 0.875rem;
        color: #888;
    }
    
    @media (max-width: 768px) {
        .palettes-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-md);
        }
        
        .filters {
            width: 100%;
        }
        
        .filters select {
            width: 100%;
        }
        
        .create-action {
            text-align: left;
        }
    }
</style>